{"version":3,"sources":["smartaco.gif","g.gif","components/Content.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Content","_ref","msg","react_default","a","createElement","className","src","require","placeholder","alt","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChat","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","document","querySelector","classList","add","value","fetch","concat","then","response","json","data","remove","setState","cnt","console","log","catch","err","stop","state","_this2","window","addEventListener","e","key","components_Content","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+JAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yKCmBzBC,eAjBC,SAAAC,GAAW,IAATC,EAASD,EAATC,IACd,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQC,IAAKC,EAAQ,OAExCL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,SAAOI,YAAY,0BACnBN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUJ,KAG7BC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,IAAKC,EAAQ,IAAaE,IAAI,QC4CpDC,cAlDb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAeRQ,OAhBkBN,OAAAO,EAAA,EAAAP,CAAAQ,EAAAlB,EAAAmB,KAgBT,SAAAC,IAAA,IAAAtB,EAAA,OAAAoB,EAAAlB,EAAAqB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACPC,SAASC,cAAc,QAAQC,UAAUC,IAAI,QACvC9B,EAAM2B,SAASC,cAAc,SAASG,MAC5CC,MAAK,+GAAAC,OAAgHjC,IACpHkC,KAAK,SAAAC,GACJ,OAAOA,EAASC,SAEjBF,KAAK,SAAAG,GACJV,SAASC,cAAc,QAAQC,UAAUS,OAAO,QAChD3B,EAAK4B,SAAS,CAACvC,IAAKqC,EAAKG,MACzBC,QAAQC,IAAIL,GACAV,SAASC,cAAc,SAASG,MAAQ,KAErDY,MAAM,SAAAC,GACLjB,SAASC,cAAc,OAAOC,UAAUS,OAAO,QAC/C3B,EAAK4B,SAAS,CAACvC,IAAK,iBACpByC,QAAQC,IAAIE,KAhBP,wBAAApB,EAAAqB,SAAAvB,MAdPX,EAAKmC,MAAQ,CACX9C,IAAK,IAHSW,mFAOE,IAAAoC,EAAAjC,KAClBkC,OAAOC,iBAAiB,WAAY,SAACC,GACrB,UAAVA,EAAEC,KACJJ,EAAK7B,4CA2BT,OACEjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACiD,EAAD,CAASlC,OAAQJ,KAAKI,OAAQlB,IAAKc,KAAKgC,MAAM9C,OAEhDC,EAAAC,EAAAC,cAAA,gEA3CUkD,aCIEC,QACW,cAA7BN,OAAOO,SAASC,UAEe,UAA7BR,OAAOO,SAASC,UAEhBR,OAAOO,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASjC,SAASkC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC","file":"static/js/main.3c31623c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/smartaco.666f1c8c.gif\";","module.exports = __webpack_public_path__ + \"static/media/g.0c194e03.gif\";","import React from 'react'\n\nconst Content = ({msg}) => {\n    return (\n        <div className=\"cont\">\n            <div>\n                <header>\n                    <h1>SMARTACO</h1>\n                    <img className=\"smart\" src={require('../smartaco.gif')}/>\n                </header>\n                <div className=\"request\">\n                    <input placeholder=\"Chat with SmartAco...\"/>\n                    <div className=\"smarta\">{msg}</div>\n                </div>\n                </div>\n                <img className=\"img\" src={require('../g.gif')} alt=\"\" />\n        </div>\n    )\n}\nexport default Content","import React, {Component} from 'react';\nimport './App.css';\nimport 'font-awesome/css/font-awesome.min.css'\nimport Content from './components/Content';\n\n\n\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      msg: []\n    }\n  }\n  \n  componentDidMount() {\n    window.addEventListener('keypress', (e)=>{\n      if (e.key === 'Enter') {\n        this.onChat()\n      }\n    })\n  }\n  \n\n  onChat = async () => {\n    document.querySelector('.img').classList.add('show')\n    const msg = document.querySelector('input').value\n    fetch(`https://cors-anywhere.herokuapp.com/http://api.brainshop.ai/get?bid=8601&key=dtvRbKjZKR8GGZ4C&uid=67063&msg=${msg}`)\n    .then(response => {\n      return response.json()\n    })\n    .then(data => {\n      document.querySelector('.img').classList.remove('show')\n      this.setState({msg: data.cnt})\n      console.log(data)\n      const msg = document.querySelector('input').value = ''\n    })\n    .catch(err => {\n      document.querySelector('img').classList.remove('show')\n      this.setState({msg: 'Bad Internet'})\n      console.log(err)\n    });\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <Content onChat={this.onChat} msg={this.state.msg}/>\n        </div>\n        <footer>&copy; By Ashraf, powered by Acobot Team\n        </footer>\n      </div>\n    );\n  }\n}\n\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}